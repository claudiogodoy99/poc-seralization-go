// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: def.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SerializedService_ParentUnaryCall_FullMethodName = "/SerializedService/ParentUnaryCall"
	SerializedService_UnaryCall_FullMethodName       = "/SerializedService/UnaryCall"
	SerializedService_ParentCC_FullMethodName        = "/SerializedService/ParentCC"
	SerializedService_ChildCC_FullMethodName         = "/SerializedService/ChildCC"
)

// SerializedServiceClient is the client API for SerializedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SerializedServiceClient interface {
	ParentUnaryCall(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	UnaryCall(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	ParentCC(ctx context.Context, in *CC, opts ...grpc.CallOption) (*UnaryResponse, error)
	ChildCC(ctx context.Context, in *CC, opts ...grpc.CallOption) (*UnaryResponse, error)
}

type serializedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSerializedServiceClient(cc grpc.ClientConnInterface) SerializedServiceClient {
	return &serializedServiceClient{cc}
}

func (c *serializedServiceClient) ParentUnaryCall(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, SerializedService_ParentUnaryCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serializedServiceClient) UnaryCall(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, SerializedService_UnaryCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serializedServiceClient) ParentCC(ctx context.Context, in *CC, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, SerializedService_ParentCC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serializedServiceClient) ChildCC(ctx context.Context, in *CC, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, SerializedService_ChildCC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SerializedServiceServer is the server API for SerializedService service.
// All implementations must embed UnimplementedSerializedServiceServer
// for forward compatibility
type SerializedServiceServer interface {
	ParentUnaryCall(context.Context, *UnaryRequest) (*UnaryResponse, error)
	UnaryCall(context.Context, *UnaryRequest) (*UnaryResponse, error)
	ParentCC(context.Context, *CC) (*UnaryResponse, error)
	ChildCC(context.Context, *CC) (*UnaryResponse, error)
	mustEmbedUnimplementedSerializedServiceServer()
}

// UnimplementedSerializedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSerializedServiceServer struct {
}

func (UnimplementedSerializedServiceServer) ParentUnaryCall(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParentUnaryCall not implemented")
}
func (UnimplementedSerializedServiceServer) UnaryCall(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (UnimplementedSerializedServiceServer) ParentCC(context.Context, *CC) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParentCC not implemented")
}
func (UnimplementedSerializedServiceServer) ChildCC(context.Context, *CC) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildCC not implemented")
}
func (UnimplementedSerializedServiceServer) mustEmbedUnimplementedSerializedServiceServer() {}

// UnsafeSerializedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SerializedServiceServer will
// result in compilation errors.
type UnsafeSerializedServiceServer interface {
	mustEmbedUnimplementedSerializedServiceServer()
}

func RegisterSerializedServiceServer(s grpc.ServiceRegistrar, srv SerializedServiceServer) {
	s.RegisterService(&SerializedService_ServiceDesc, srv)
}

func _SerializedService_ParentUnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerializedServiceServer).ParentUnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerializedService_ParentUnaryCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerializedServiceServer).ParentUnaryCall(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerializedService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerializedServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerializedService_UnaryCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerializedServiceServer).UnaryCall(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerializedService_ParentCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerializedServiceServer).ParentCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerializedService_ParentCC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerializedServiceServer).ParentCC(ctx, req.(*CC))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerializedService_ChildCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerializedServiceServer).ChildCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerializedService_ChildCC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerializedServiceServer).ChildCC(ctx, req.(*CC))
	}
	return interceptor(ctx, in, info, handler)
}

// SerializedService_ServiceDesc is the grpc.ServiceDesc for SerializedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SerializedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SerializedService",
	HandlerType: (*SerializedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParentUnaryCall",
			Handler:    _SerializedService_ParentUnaryCall_Handler,
		},
		{
			MethodName: "UnaryCall",
			Handler:    _SerializedService_UnaryCall_Handler,
		},
		{
			MethodName: "ParentCC",
			Handler:    _SerializedService_ParentCC_Handler,
		},
		{
			MethodName: "ChildCC",
			Handler:    _SerializedService_ChildCC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "def.proto",
}
